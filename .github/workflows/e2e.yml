name: End to end testing

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_run:
    workflows: ["Release"]
    types: [requested]

jobs:
  get-test-definition-files:
    name: Get Test Definition Files
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.get-test-definition-files.outputs.result }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18.x

      - name: Add GOBIN to PATH
        run: echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        shell: bash

      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          repository: newrelic/open-install-library
          path: open-install-library

      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v2
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_TOKEN }}

      - name: Get Test Definition Files
        id: get-test-definition-files
        uses: actions/github-script@v3
        with:
          script: |
            const fs = require("fs");
            const fsp = fs.promises;
            const path = require("path");

            // readdir recursive directory search
            const { readdir } = fsp;
            async function getFiles(dir) {
              const dirents = await readdir(dir, { withFileTypes: true });
              const files = await Promise.all(
                dirents.map((dirent) => {
                  const res = path.join(dir, dirent.name);
                  return dirent.isDirectory() ? getFiles(res) : res;
                })
              );
              return Array.prototype.concat(...files);
            }

            const testDefinitions = await getFiles(`${process.env.GITHUB_WORKSPACE}/open-install-library/test/definitions/smoke`);

            const outputTestFilesMap = testDefinitions
              .map((testDefinitionFile) => {
                return {
                  testDefinitionFile,
                  testDisplayName: testDefinitionFile.split("/").pop(),
                };
              });
            const output = {
              include: outputTestFilesMap,
            };
            console.log(output);
            return output;

